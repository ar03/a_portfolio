a_portfolio build notes

rails new a_portfolio -T --database=postgresql  # -T flag tells rails not to include the default testing provied by Rails
                                                # --database=DATABASE allows you to choose the database your app will use
--skip-webpack-install                          #Add this to rails new; Rails will not install webpack upon app creation but will add the Gem
                                                #!!!!!-- out of the box 'rails s' does not function properly without webpacker --!!!!!


rails db:create                                 #Creates the database if its not already done (Must create database before 'rails s' will work
rails db:migrate                                #Migrates database
dbdrop [dbName]                                 #If a database already exists, this will remove it from postgresql

rails s                                         #Starts rails server on localhost:3000
rails webpacker:install                         #if webpacker is skipped, requires install, rails s does not fuction properly


rails g scaffold Blog title:string body:text    #Scaffolds automatically create multiple items at the same time
                                                #Feature called Blog, attributes of title and body with datatypes of string and text respectively

** Reference the schema file (app_name/db/schema.rb) for attributes, this file is rarely changed manually..dont touch it... **

**Notes on scaffold generators**
    -Overview of files generated by rails g scaffold
      *app/assets/javascript/blog.coffee

      *app/assets/stylesheets/blog.scss         #empty style sheet ready from scss
      *app/assets/stylesheets/scaffold.scss     #this file can be removed, if not weird behavior with /blog.scss may occur(overwrites/style bugs)
      *app/controllers/blogs_controller.rb      #controllers give the ability to communicate between the model, view and routing system.
        -index
        -show                                   #check before_action
        -new                                    #new instantiates the instance and directs to create (upon button click) @blog = Blog.new
        -edit
        -create                                 #takes form parameters, creates a new instance and redirects to 'show'  @blog = Blog.new(blog_params)
        -update
        -destroy
      *app/config/routes.rb                     #resources encapsulates all routes displayed in 'Fig 1.0'

rails routes                                    #displays routes

                *Prefix                         #this is the method used in the code, gives full route path
                *Verb                           #this determines if the interaction with the server is to send, recieve, or update information
                *URI Pattern                    #full list of the path in the browser
                *Controller#Action              #mapped controlller#action

      <---------------------------------------------------------------Fig 1.0-------------------------------------------------------------->
                 Prefix Verb    URI Pattern                                                                            Controller#Action

                blogs GET     /blogs(.:format)                                                                         blogs#index
                      POST    /blogs(.:format)                                                                         blogs#create
             new_blog GET     /blogs/new(.:format)                                                                     blogs#new
            edit_blog GET     /blogs/:id/edit(.:format)                                                                blogs#edit
                 blog GET     /blogs/:id(.:format)                                                                     blogs#show
                      PATCH   /blogs/:id(.:format)                                                                     blogs#update
                      PUT     /blogs/:id(.:format)                                                                     blogs#update
                      DELETE  /blogs/:id(.:format)                                                                     blogs#destroy

      <---------------------------------------------------------------Fig 1.0-------------------------------------------------------------->

    - .gitignore                                #Use this file to determine what does not get recorded in version control .. creds., keys, certs, ect..
git rm . -r --cached                            #git uses a caching mechanism, you need to clear the cache

git checkout -b branch_name                     #checkout a branch
git push origin branch_name                     #pushes current branch to a remote branch on github

git checkout master                             #move back to the master branch before merging
git merge branch_name                           #merge a branch locally (used mostly in solo coding)
git push                                        #push up to master branch on repo

** On github.com                                #Create a pull request, use markdown to detail work (optional?) and merge with master (on github)
git checkout master                             #switches back to master branch (used when working with teams)
git pull                                        #this will pull from github any changes that were merged from other branches, into local env.


    ** Rails Generators **                      #Rails generators scaffold/controller/model

rails g controller Pages home about contact     #creates controller#action                                **Controllers names are in plural form**
rails g model Skill title:string %:integer      #creates a model based on attribute:datatype provided     **Models are in singular form**

    -* Rails Console *-

rails c                                         #Built in rails console for direct access to the database

  :001 > Skill.create!(title: "Rails", percent_utilized: 75)
                                                #adding ! to create throws an error if there is one, otherwise the console will fail silently

rails g resources Portfolio title:string subtitle:string body:text main_image:text thumb_image:text
                                                #resources generator is similar to scaffold but skinny, it creates directories for MVC with no code
                                                #store images as text, in a DB it stores the link/path to the image, not the image itself



